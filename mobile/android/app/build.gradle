apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

react {
    autolinkLibrariesWithApp()

    hermesEnabled = true
}

apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

def enableProguardInReleaseBuilds = false

def jscFlavor = 'org.webkit:android-jsc-intl:+'

def keystorePropertiesFile = rootProject.file("keystore.properties");
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
} else {
    logger.warn("WARNING keystore.properties not found, signing of release builds may not work.")
}

android {
    ndkVersion rootProject.ext.ndkVersion

    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion
    namespace  "com.railway.rtp"

    defaultConfig {
        applicationId "com.railway.rtp"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 130
        versionName "5.22.4"

        missingDimensionStrategy 'react-native-camera', 'general'

        aaptOptions {
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }

    sourceSets {
        main {
            assets.srcDirs += "$projectDir/../build/nodejs-native-assets"
        }
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            enableV3Signing true
            enableV4Signing true
            if (project.hasProperty('RAILWAY_RELEASE_STORE_FILE')) {
                storeFile file(RAILWAY_RELEASE_STORE_FILE)
                storePassword keystoreProperties['release_store_password']
                keyAlias RAILWAY_RELEASE_KEY_ALIAS
                keyPassword keystoreProperties['release_key_password']
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
}

dependencies {
    implementation("com.facebook.react:react-android")

    implementation 'com.google.android.gms:play-services-basement:17.6.0'
    implementation 'com.google.android.gms:play-services-auth:17.0.0'

    implementation 'com.facebook.fresco:fresco:2.0.0'
    implementation 'com.facebook.fresco:animated-gif:2.6.0'

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

afterEvaluate {
    tasks.named('lintVitalAnalyzeRelease').configure {
        dependsOn 'copyReactNativeVectorIconFonts'
    }

    tasks.named('generateReleaseLintVitalReportModel').configure {
        dependsOn 'copyReactNativeVectorIconFonts'
    }
}

configurations.all {
    resolutionStrategy.activateDependencyLocking()
}
